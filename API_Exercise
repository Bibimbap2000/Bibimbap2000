{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'number': 3, 'people': [{'craft': 'ISS', 'name': 'Chris Cassidy'}, {'craft': 'ISS', 'name': 'Anatoly Ivanishin'}, {'craft': 'ISS', 'name': 'Ivan Vagner'}], 'message': 'success'}\n"
     ]
    }
   ],
   "source": [
    "#1 Practice\n",
    "\n",
    "import requests\n",
    "import json\n",
    "\n",
    "response = requests.get(\"http://api.open-notify.org/astros.json\")\n",
    "\n",
    "decoded_data = response.json()\n",
    "\n",
    "print(decoded_data)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Key: number Value: 3 \n",
      "\n",
      "Key: people Value: [{'craft': 'ISS', 'name': 'Chris Cassidy'}, {'craft': 'ISS', 'name': 'Anatoly Ivanishin'}, {'craft': 'ISS', 'name': 'Ivan Vagner'}] \n",
      "\n",
      "Key: message Value: success \n",
      "\n"
     ]
    }
   ],
   "source": [
    "iss_response = requests.get(\"http://api.open-notify.org/astros.json\")\n",
    "\n",
    "decoded_data = response.json()\n",
    "\n",
    "for key, ratings in decoded_data.items():\n",
    "    print(\"Key:\", key, \"Value:\", ratings, \"\\n\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Key: number; Value: 3\n",
      "Key: people; Value: [{'craft': 'ISS', 'name': 'Chris Cassidy'}, {'craft': 'ISS', 'name': 'Anatoly Ivanishin'}, {'craft': 'ISS', 'name': 'Ivan Vagner'}]\n",
      "Key: message; Value: success\n"
     ]
    }
   ],
   "source": [
    "iss_response = requests.get(\"http://api.open-notify.org/astros.json\")\n",
    "\n",
    "decoded_data = iss_response.json()\n",
    "\n",
    "for key, value in decoded_data.items():\n",
    "    print(f\"Key: {key}; Value: {value}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Chris Cassidy\n",
      "Anatoly Ivanishin\n",
      "Ivan Vagner\n"
     ]
    }
   ],
   "source": [
    "iss_response = requests.get(\"http://api.open-notify.org/astros.json\")\n",
    "\n",
    "decoded_dictionary = iss_response.json()\n",
    "\n",
    "for item in decoded_dictionary[\"people\"]:\n",
    "    print(item[\"name\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Spider-Man\n",
      "Peter Parker\n"
     ]
    }
   ],
   "source": [
    "#2 Superhero\n",
    "\n",
    "#import requests to get request/retreieve API from external web\n",
    "import requests\n",
    "#Import json format to organize API information\n",
    "import json \n",
    "#assign superohero_id to super hero's id 620 from API\n",
    "superhero_id = 620\n",
    "\n",
    "#requests API from the link address\n",
    "response = requests.get(\"https://www.superheroapi.com/api/10102286948688531/620\")\n",
    "#Formats the API to json form\n",
    "response_dictionary = response.json()\n",
    "\n",
    "#print superhero name from the dictionary\n",
    "print(response_dictionary[\"name\"])\n",
    "\n",
    "#set biography to the biography dictionary\n",
    "biography = response_dictionary[\"biography\"]\n",
    "#print the full name of the superhero within the biography dictionary\n",
    "print(biography[\"full-name\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "213\n",
      "Deadpool\n",
      "Wade Wilson\n"
     ]
    }
   ],
   "source": [
    "import random #allow the usage of random selection of items in this case multiple superhero IDs\n",
    "#list of four random superhero ids\n",
    "random_ids = [\"620\", \"720\", \"213\", \"157\"]\n",
    "#A random ID will be selected from the list\n",
    "random_superhero = random.choice(random_ids)\n",
    "#print the randomly selected ID\n",
    "print(random_superhero)\n",
    "\n",
    "#retreieve API from the link and string the random superhero ID that was randomly picked\n",
    "data = requests.get(\"https://www.superheroapi.com/api/10102286948688531/\" + str(random_superhero))\n",
    "#format the data from the API into json form\n",
    "reply_data = data.json()\n",
    "\n",
    "#print the name of the superhero from the json format\n",
    "print(reply_data[\"name\"])\n",
    "#create bio variable with value from the biography dictionary\n",
    "bio = reply_data[\"biography\"]\n",
    "#print the full name of the superhero from the biography\n",
    "print(bio[\"full-name\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Darth Vader\n",
      "Anakin Skywalker\n"
     ]
    }
   ],
   "source": [
    "#selected and assigned a superhero id\n",
    "superhero_id = 208\n",
    "#retreieve the API\n",
    "response = requests.get(\"https://www.superheroapi.com/api/10102286948688531/208\")\n",
    "#format the API into json form\n",
    "response_dictionary = response.json()\n",
    "#print the name of the superhero\n",
    "print(response_dictionary[\"name\"])\n",
    "#create bio variable with assigned value from the biography dictionary\n",
    "biography = response_dictionary[\"biography\"]\n",
    "#print the full name of the superhero from the biography\n",
    "print(biography[\"full-name\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "245\n",
      "Ethan Hunt\n",
      "Ethan Hunt\n"
     ]
    }
   ],
   "source": [
    "#imports the random module\n",
    "import random\n",
    "#creates a class for a superhero\n",
    "class Superhero:\n",
    "   def __init__(self, name, full_name, intelligence): #creates an inner function for the Superhero class with its stats\n",
    "       self.name = name #a name argument for the inner function\n",
    "       self.full_name = full_name #full-name argument for the inner function\n",
    "       self.intelligence = intelligence #intelligence argument for the inner function\n",
    "def modify_intelligence (self, amount): #outter function to modify intelligence stat\n",
    "        self.speed = +- amount #increase/decrease stat amount\n",
    "random.randrange(-10,10) #random speed range from -10 to 10  \n",
    "        \n",
    "random_ids = [\"245\", \"480\", \"687\", \"208\"] #list of superhero IDs \n",
    "random_superhero = random.choice(random_ids)#randomly select a ID from the random ID list\n",
    "print(random_superhero) #print the random ID from the list\n",
    "data = requests.get(\"https://www.superheroapi.com/api/10102286948688531/\" + str(random_superhero))#retreieve API and string the random ID\n",
    "reply_data = data.json() #Change the API to json format\n",
    "print(reply_data[\"name\"]) #print the name of the superhero thatw as selected\n",
    "bio = reply_data[\"biography\"] \n",
    "print(bio[\"full-name\"]) #print the full name of the superhero from the biography dictionary\n",
    "\n",
    "def generate_heroes(random_superhero): #creates a function that randomly pick a superhero\n",
    "    random_ids = [] #empty id list\n",
    "    for hero in random_ids: #for loop of heros in the empty list\n",
    "        response = requests.get (\"https://www.superheroapi.com/api/10102286948688531/{hero_id}\")#retreieve the API\n",
    "        response_dictionary = response.json()  #creates a json format of the API\n",
    "        hero_name = response_dictionary[\"name\"] #assign name from the dictionary to variable gero_name\n",
    "        full_name = response_dictionary[\"biography\"][\"full name\"] #assign full_name variable with the API's  biography and full name  \n",
    "        intelligence = int(response_dictionary[\"powerstats\"][\"intelligence\"]) #intelligence variable to convert all response_dictionary's stats to integers\n",
    "        \n",
    "        superhero_object = superhero(hero_name, full_name, intelligence) #Superhero object creation\n",
    "        superhero_list.append(superhero_object) #append Superhero to list\n",
    "        return superhero_list #return superhero_list to output"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Spider-Man Peter Parker 67\n",
      "Wonder Woman Diana Prince 79\n",
      "Deadpool Wade Wilson 50\n",
      "Captain Marvel Carol Danvers 71\n",
      "Amount: -7\n",
      "Amount: -5\n",
      "Amount: -2\n",
      "Amount: -8\n",
      "Spider-Man Peter Parker 60\n",
      "Wonder Woman Diana Prince 74\n",
      "Deadpool Wade Wilson 48\n",
      "Captain Marvel Carol Danvers 63\n"
     ]
    }
   ],
   "source": [
    "import random #import random module\n",
    "\n",
    "superhero_ids = [620, 720, 213, 157] #superhero IDs in a list\n",
    "\n",
    "class Superhero: #create a class for superhero\n",
    "    def __init__(self, name, full_name, speed): #a function within the class assigning arguments for the superhero\n",
    "        self.name = name #name argument\n",
    "        self.full_name = full_name #full name argument\n",
    "        self.speed = speed #speec argument\n",
    "        \n",
    "    def modify_speed(self, amount): #function to modify speed stat\n",
    "        self.speed += amount #speed stat increases from amount\n",
    "\n",
    "\n",
    "        \n",
    "def generate_heroes(superhero_ids): #function that loops through our superheroes\n",
    "    superhero_list = [] #empty list at the top of our function\n",
    "    for hero_id in superhero_ids: #for loop of ID in IDs list\n",
    "        response = requests.get(f\"https://www.superheroapi.com/api/10102286948688531/{hero_id}\") #retreieve API in f string\n",
    "        response_dictionary = response.json()#converting it from json to a dictionary, easier to find values if converted to python dictionary first\n",
    "        hero_name = response_dictionary[\"name\"] #variable hero_name will be assigned the name of the hero from the dictionary\n",
    "        full_name = response_dictionary[\"biography\"][\"full-name\"] #full_name will contain hero's fullname from the biography dictionary\n",
    "        speed = int(response_dictionary[\"powerstats\"][\"speed\"])#speed contain the powerstats' dictionary speed stat and convert it to integer \n",
    "        \n",
    "        superhero_object = Superhero(hero_name, full_name, speed) #Superhero object will have the argument of the hero's name, full name, and speed\n",
    "        superhero_list.append(superhero_object) #append to superhero_list\n",
    "    return superhero_list #return superhero_List value to output\n",
    "\n",
    "def randomize_speed(superhero_list): #function to randomize superhero's speed stat from a superhero in list\n",
    "    for hero in superhero_list: #for loop of hero in the list\n",
    "        amount = random.randrange(-10,10) #random speed range from -10 to 10\n",
    "        print(\"Amount:\", amount) #print the amount of speed of the superhero\n",
    "        hero.modify_speed(amount) #adjust hero speed by amount\n",
    "\n",
    "\n",
    "\n",
    "test_list = generate_heroes(superhero_ids) #testing list of superheroes\n",
    "\n",
    "for hero in test_list: #for loop of heroes in test_list\n",
    "    print(hero.name, hero.full_name, hero.speed) #print the hero's name, full name, and speed\n",
    "    \n",
    "randomize_speed(test_list)  #randomizes the speed stats of the heroes in in the test list\n",
    "\n",
    "for hero in test_list: #for loop of heros in the test_list\n",
    "    print(hero.name, hero.full_name, hero.speed) #print hero's name, full name and speed"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Key: status; Value: success\n",
      "Key: data; Value: [{'id': '1', 'employee_name': 'Tiger Nixon', 'employee_salary': '320800', 'employee_age': '61', 'profile_image': ''}, {'id': '2', 'employee_name': 'Garrett Winters', 'employee_salary': '170750', 'employee_age': '63', 'profile_image': ''}, {'id': '3', 'employee_name': 'Ashton Cox', 'employee_salary': '86000', 'employee_age': '66', 'profile_image': ''}, {'id': '4', 'employee_name': 'Cedric Kelly', 'employee_salary': '433060', 'employee_age': '22', 'profile_image': ''}, {'id': '5', 'employee_name': 'Airi Satou', 'employee_salary': '162700', 'employee_age': '33', 'profile_image': ''}, {'id': '6', 'employee_name': 'Brielle Williamson', 'employee_salary': '372000', 'employee_age': '61', 'profile_image': ''}, {'id': '7', 'employee_name': 'Herrod Chandler', 'employee_salary': '137500', 'employee_age': '59', 'profile_image': ''}, {'id': '8', 'employee_name': 'Rhona Davidson', 'employee_salary': '327900', 'employee_age': '55', 'profile_image': ''}, {'id': '9', 'employee_name': 'Colleen Hurst', 'employee_salary': '205500', 'employee_age': '39', 'profile_image': ''}, {'id': '10', 'employee_name': 'Sonya Frost', 'employee_salary': '103600', 'employee_age': '23', 'profile_image': ''}, {'id': '11', 'employee_name': 'Jena Gaines', 'employee_salary': '90560', 'employee_age': '30', 'profile_image': ''}, {'id': '12', 'employee_name': 'Quinn Flynn', 'employee_salary': '342000', 'employee_age': '22', 'profile_image': ''}, {'id': '13', 'employee_name': 'Charde Marshall', 'employee_salary': '470600', 'employee_age': '36', 'profile_image': ''}, {'id': '14', 'employee_name': 'Haley Kennedy', 'employee_salary': '313500', 'employee_age': '43', 'profile_image': ''}, {'id': '15', 'employee_name': 'Tatyana Fitzpatrick', 'employee_salary': '385750', 'employee_age': '19', 'profile_image': ''}, {'id': '16', 'employee_name': 'Michael Silva', 'employee_salary': '198500', 'employee_age': '66', 'profile_image': ''}, {'id': '17', 'employee_name': 'Paul Byrd', 'employee_salary': '725000', 'employee_age': '64', 'profile_image': ''}, {'id': '18', 'employee_name': 'Gloria Little', 'employee_salary': '237500', 'employee_age': '59', 'profile_image': ''}, {'id': '19', 'employee_name': 'Bradley Greer', 'employee_salary': '132000', 'employee_age': '41', 'profile_image': ''}, {'id': '20', 'employee_name': 'Dai Rios', 'employee_salary': '217500', 'employee_age': '35', 'profile_image': ''}, {'id': '21', 'employee_name': 'Jenette Caldwell', 'employee_salary': '345000', 'employee_age': '30', 'profile_image': ''}, {'id': '22', 'employee_name': 'Yuri Berry', 'employee_salary': '675000', 'employee_age': '40', 'profile_image': ''}, {'id': '23', 'employee_name': 'Caesar Vance', 'employee_salary': '106450', 'employee_age': '21', 'profile_image': ''}, {'id': '24', 'employee_name': 'Doris Wilder', 'employee_salary': '85600', 'employee_age': '23', 'profile_image': ''}]\n",
      "ID:1\n",
      "Name:Tiger Nixon\n",
      "Salary:$320800\n",
      "ID:2\n",
      "Name:Garrett Winters\n",
      "Salary:$170750\n",
      "ID:3\n",
      "Name:Ashton Cox\n",
      "Salary:$86000\n",
      "ID:4\n",
      "Name:Cedric Kelly\n",
      "Salary:$433060\n",
      "ID:5\n",
      "Name:Airi Satou\n",
      "Salary:$162700\n",
      "ID:6\n",
      "Name:Brielle Williamson\n",
      "Salary:$372000\n",
      "ID:7\n",
      "Name:Herrod Chandler\n",
      "Salary:$137500\n",
      "ID:8\n",
      "Name:Rhona Davidson\n",
      "Salary:$327900\n",
      "ID:9\n",
      "Name:Colleen Hurst\n",
      "Salary:$205500\n",
      "ID:10\n",
      "Name:Sonya Frost\n",
      "Salary:$103600\n",
      "ID:11\n",
      "Name:Jena Gaines\n",
      "Salary:$90560\n",
      "ID:12\n",
      "Name:Quinn Flynn\n",
      "Salary:$342000\n",
      "ID:13\n",
      "Name:Charde Marshall\n",
      "Salary:$470600\n",
      "ID:14\n",
      "Name:Haley Kennedy\n",
      "Salary:$313500\n",
      "ID:15\n",
      "Name:Tatyana Fitzpatrick\n",
      "Salary:$385750\n",
      "ID:16\n",
      "Name:Michael Silva\n",
      "Salary:$198500\n",
      "ID:17\n",
      "Name:Paul Byrd\n",
      "Salary:$725000\n",
      "ID:18\n",
      "Name:Gloria Little\n",
      "Salary:$237500\n",
      "ID:19\n",
      "Name:Bradley Greer\n",
      "Salary:$132000\n",
      "ID:20\n",
      "Name:Dai Rios\n",
      "Salary:$217500\n",
      "ID:21\n",
      "Name:Jenette Caldwell\n",
      "Salary:$345000\n",
      "ID:22\n",
      "Name:Yuri Berry\n",
      "Salary:$675000\n",
      "ID:23\n",
      "Name:Caesar Vance\n",
      "Salary:$106450\n",
      "ID:24\n",
      "Name:Doris Wilder\n",
      "Salary:$85600\n"
     ]
    }
   ],
   "source": [
    "#Practice 2 \n",
    "import requests\n",
    "import json\n",
    "\n",
    "respond = requests.get(\"http://dummy.restapiexample.com/api/v1/employees\")\n",
    "ndata = respond.json()\n",
    "\n",
    "for key, value in ndata.items():\n",
    "    print(f\"Key: {key}; Value: {value}\") #not sure why its not printing cleanly\n",
    "    \n",
    "for x in ndata[\"data\"]:\n",
    "    print(\"ID:\" + x[\"id\"])\n",
    "    print(\"Name:\" + x[\"employee_name\"])\n",
    "    print(\"Salary:\" + \"$\"+ x[\"employee_salary\"])\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "invalid syntax (<ipython-input-38-24faa5544e51>, line 14)",
     "output_type": "error",
     "traceback": [
      "\u001b[1;36m  File \u001b[1;32m\"<ipython-input-38-24faa5544e51>\"\u001b[1;36m, line \u001b[1;32m14\u001b[0m\n\u001b[1;33m    fromaddr = \"kchen182@binghamton.edu\" #not sure why it say invadlid syntax, the cell below works and tried copy and paste\u001b[0m\n\u001b[1;37m           ^\u001b[0m\n\u001b[1;31mSyntaxError\u001b[0m\u001b[1;31m:\u001b[0m invalid syntax\n"
     ]
    }
   ],
   "source": [
    "import requests\n",
    "\n",
    "r = requests.get(\"http://api.open-notify.org/iss-now.json\")\n",
    "print(r)\n",
    "j =r.json() \n",
    "print(j)\n",
    "space_station_location = (r.json())\n",
    "space_station_longitude = float(space_station_location['iss_position']['longitude'])\n",
    "print('space_station_longitude', space_station_longitude)\n",
    "space_station_latitude = float(space_station_location['iss_position']['latitude'])\n",
    "print('space_station_latitude', space_station_latitude)\n",
    "\n",
    "msg = \"The latitude and longitude of the ISS is \" + \"(\" + str(float(space_station_latitude['iss_position']['latitude'])) + \", \" + str(float(space_station_longitude['iss_position'])['longitutde'] + \")).\"\n",
    "fromaddr = \"kchen182@binghamton.edu\" #not sure why it say invadlid syntax, the cell below works and tried copy and paste\n",
    "toaddr = \"kchen182@binghamton.edu\"\n",
    "server = smtplib.SMTP('smtp.gmail.com', 587) \n",
    "server.starttls() \n",
    "server.login(\"kchen182@binghamton.edu\", \"Cammera32\")\n",
    "server.sendmail(fromaddr, toaddr, msg)\n",
    "server.quit()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(221, b'2.0.0 closing connection z6sm6355171qkl.39 - gsmtp')"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import smtplib\n",
    "\n",
    "msg = \"This email was sent with Python\"\n",
    "fromaddr = \"kchen182@binghamton.edu\"\n",
    "toaddr = \"kchen182@binghamton.edu\"\n",
    "server = smtplib.SMTP('smtp.gmail.com', 587) \n",
    "server.starttls() \n",
    "server.login(\"kchen182@binghamton.edu\", \"Cammera32\")\n",
    "server.sendmail(fromaddr, toaddr, msg)\n",
    "server.quit()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
